#! /usr/bin/env python3

#2008-10-03 exception introduced when too many internal splits, but still error when decomposition is applied

# own libraries
from utils import *
from Graph import *

# external libraries
from string import *
from copy import *
import math
import os
import sys

def warnx(*args, **kwargs):
    sys.stderr.write("%s: " % os.path.basename(sys.argv[0]))
    print(*args, file=sys.stderr, **kwargs)

def err(*args, **kwargs):
    sys.stderr.write("%s: " % os.path.basename(sys.argv[0]))
    print(*args, file=sys.stderr, **kwargs)
    sys.exit(1)

VERSION="v1.41.0"

def version():
    text="""%s %s

Copyright (C) 2009  Anne Kupczok, Arndt von Haeseler and Steffen Klaere
Copyright (C) 2018  Fabian Kl√∂tzl <kloetzl@evolbio.mpg.de>

This is a heavily modified version of the original GeoMeTree by the
authors given above.  The same license (GPL-2+) applies.

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. This program is distributed in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
the GNU General Public License for more details."""
    print(text % (os.path.basename(sys.argv[0]), VERSION))
    sys.exit(0)


#================================================================================#  
# Methods for parsing newick trees
#================================================================================#  

def get_splits(newick_string,term=True): #if term: append also terminal splits and branch lengths    
    return splits_for_tree(parse_newick(newick_string),term)

def get_split_representation(splits1,splits2): #extract splits only in one tree and compute adjacency matrix
    
    def is_compatible(s1,s2):
        s1r,s1l=s1.split('|') #right and left side
        s2r,s2l=s2.split('|')
        for i in s1r,s1l:
            act1=set(i.split('*'))
            for j in s2r,s2l:
                act2=set(j.split('*')) 
                if len(act1.intersection(act2))==0:return True
        return False

    splits1s=set(splits1).difference(set(splits2)) #splits only in T1
    splits2s=set(splits2).difference(set(splits1)) #splits only in T2

    splits=list(splits1s)+list(splits2s) #now the splits are only those which occur in Exactly one tree, the first dim1 are from T1 and the last dim2 are from T2
    
    dim1=len(splits1s)
    dim2=len(splits2s)
    
    adj=[]
    for i in range(0,dim1):
        adj.append([False]*dim2)
        
    for i in range(0,dim1):
        for j in range(0,dim2):
            c=is_compatible(splits[i],splits[dim1+j])
            adj[i][j]=c
    
    return splits, adj, len(splits1s), len(splits2s)


#================================================================================#  
#Methods for finding the geodesic path
#================================================================================#  

def geodesic(adj,bl1,bl2,neg,todo): #returns the last orthant

    def cone(diff1,diff2,shared1=[],shared2=[]):
        sharednorm=snorm([shared1[i]-shared2[i] for i in range(0,len(shared1))])
        return math.sqrt((norm(diff1)+norm(diff2))**2+sharednorm)

    bestp=[None]
    mind=[cone(bl1,bl2)+1]
    countp=[0]
    
    def best_path(edge,past=[]): #finds shortest path through graph
        past.append(edge)
        if not edge.anc.edges:
            countp[0]+=1
            newp=Path(past)
            dist=newp.distance(bl1,bl2)
            if sum(dist)<mind[0]:
                mind[0]=sum(dist)
                bestp[0]=newp
        for e in edge.anc.edges:
            if e.s < past[-1].s:best_path(e,deepcopy(past))
            
    def one_path(edge):
        elist=[edge]
        while edge.anc.edges:
            edge=edge.anc.edges[0]
            elist.append(edge)
        return Path(elist)

    def next_sub(str,i): return [x for (pos,x) in zip(list(range(len(str))), str) if (2**pos) & i] #enumerate all 2**str subsets by binary numbers

    #set class variables
    Orthant.opt=True
    Orthant.dim1=len(bl1)
    Orthant.dim2=len(bl2)
    Orthant.adj=adj

    length=2**Orthant.dim2  #number of indices generated for the orthants
    Orthant.OrthList=[None]*length

    ###Orthant.IDList=[-1]*length #stores mapping of simple IDs (binary numbers) to complex IDs (binomial coefficients)
    Orthant.IDList={}
    
    start=Orthant(Neg=neg,todoPos=todo)
    startid=start.get_id()
    Orthant.OrthList[startid]=start

    max_i=0 #index of last orthant

    for i in range(startid,length):
        if not Orthant.OrthList[i]:continue #many orthants are not generated bec suborthants of a larger one
        max_i=i
        orth=Orthant.OrthList[i]

        actdim=len(orth.get_todo())
    
        for j in range(1,2**actdim): #0. Subset is empty
            switch=next_sub(orth.get_todo(),j) 
            newedge=orth.clone(switch) #switch is the initial R, the complete edge is generated in the constructor

            oid=newedge.get_id()
            oldorth=Orthant.OrthList[oid]
            if oldorth and oldorth.edges and (newedge in oldorth.edges):
                del newedge
                continue  #path already computed

            if not oldorth: #generate orthant where the edge points to
                neworth=newedge.create_orthant()
                succ=newedge.compute_s(bl1,bl2,neworth)
                if succ: Orthant.OrthList[oid]=neworth #may be not successful, because transition times have to fullfill several constraints
                else:
                    del newedge
                    del neworth
                
            else:
                succ=newedge.compute_s(bl1,bl2,oldorth)
                if not succ: continue
                oldorth.edges.append(newedge)
                    
    lastedge=IEdge(0,0,0,0,anc=Orthant.OrthList[max_i],s=1)
    best_path(lastedge)

    return bestp[0],countp[0]

    


#================================================================================#
#Methods for computing all the distances
#================================================================================#  


def distance(tree1,tree2):

    def combine(diff,shared,splits1,bl1,dstart,dend):
        #combine branch length lists so that indices correspond to splits
        shared_branch=[bl1[splits1.index(s)] for s in shared]
        diff_branch=[bl1[splits1.index(diff[i])] for i in range (dstart,dend)]
        return diff_branch,shared_branch

    def create_shared_equ(branch1,branch2):
        equs=[]
        for i in range(0,len(branch1)):
            equs.append([0,branch2[i]-branch1[i],branch1[i]])
        return equs

    def inverse(mat):
        return [[mat[i][j] for i in range(0,len(mat))] for j in range(0,len(mat[0]))]


    split_decomp=[[list(get_splits(tree1)),list(get_splits(tree2))]]
    for t1,t2 in split_decomp:
        pass; # TODO: what are t1 and t2?

    splits1,bl1,spp1=t1
    splits2,bl2,spp2=t2

    # creates set S (diff_splits), compatibility matrix (adj), C (shared_splits) and corresponding numbers

    diff_splits,adj,dim1,dim2=get_split_representation(splits1,splits2)

    shared_splits=list(set(splits1).intersection(set(splits2)))
    shared_splits.sort()

    # combine branch length lists so that indices correspond to splits

    branch1_diff,branch1_shared=combine(diff_splits,shared_splits,splits1,bl1,0,dim1)
    branch2_diff,branch2_shared=combine(diff_splits,shared_splits,splits2,bl2,dim1,dim1+dim2)

    if not (dim1 or dim2):
        equ_r = []
        equ_l = []
        dl = dist_for_geod(equ_r+create_shared_equ(branch1_shared,branch2_shared),equ_l)
        return sum(dl)

    # find splits that are compatible to all others

    l_ind=[]
    # There may be some splits in the first tree that are compatible to all splits in the second tree -> they have to end at 1
    for i in range(0,dim1):
        if adj[i]==[True]*dim2: # all()?
            l_ind.append(i)
    comp_equ_l=[[1,-branch1_diff[i],branch1_diff[i]] for i in l_ind]
    neg=set(range(0,dim1)).difference(set(l_ind))  #neg is the starting neg for the geodesic algorithm, in case of full compatibilities, some are excluded

    r_ind=[]
    # vice versa
    for j in range(0,dim2):
        comp=True
        for i in range(0,dim1):
            if not adj[i][j]:
                comp=False
                break
        if comp: r_ind.append(j)
    comp_equ_r=[[0,branch2_diff[i],0] for i in r_ind]
    todo=set(range(0,dim2)).difference(set(r_ind))        

    # geodesic distance algorithm if still something todo

    equ_l=[]
    equ_r=[]
    if len(todo) > 0: #it may be that all were compatible because of polytomies

        # todo should be the smaller set since algorithm is exponential in len(todo)
        swap=(len(neg)<len(todo))
        if swap:
            adj=inverse(adj)
            branch1_diff,branch2_diff=branch2_diff,branch1_diff
            neg,todo=todo,neg

        try:
            path,count=geodesic(adj,branch1_diff,branch2_diff,neg,todo)
        except OverflowError:
            err("Too many splits in actual decomposition to compute the geodesic distance exactly:", Orthant.dim2)

        #the assignment to first and second tree is not correct, but changes nothing for distance computation!!!
        equ_l,equ_r= path.equations(branch1_diff,branch2_diff)

    equ_l += comp_equ_l
    equ_r += comp_equ_r

    # Compute the distances for all splits and output them

    dist_compl=dist_for_geod(equ_r+create_shared_equ(branch1_shared,branch2_shared),equ_l)

    d = sum(dist_compl)
    return d


def full_cone(tree1,tree2):
    def combine(diff,shared,splits1,bl1,dstart,dend):
        #combine branch length lists so that indices correspond to splits
        shared_branch=[bl1[splits1.index(s)] for s in shared]
        diff_branch=[bl1[splits1.index(diff[i])] for i in range (dstart,dend)]
        return diff_branch,shared_branch

    splits1,bl1,spp1=list(get_splits(tree1))
    splits2,bl2,spp2=list(get_splits(tree2))

    # creates set S (diff_splits), compatibility matrix (adj), C (shared_splits) and corresponding numbers

    diff_splits,adj,dim1,dim2=get_split_representation(splits1,splits2)

    shared_splits=list(set(splits1).intersection(set(splits2)))
    shared_splits.sort()

    # combine branch length lists so that indices correspond to splits

    diff1,shared1=combine(diff_splits,shared_splits,splits1,bl1,0,dim1)
    diff2,shared2=combine(diff_splits,shared_splits,splits2,bl2,dim1,dim1+dim2)

    sharednorm=snorm([shared1[i]-shared2[i] for i in range(0,len(shared1))])
    return math.sqrt((norm(diff1)+norm(diff2))**2+sharednorm)


def branch(tree1,tree2):
    def combine(diff,shared,splits1,bl1,dstart,dend):
        #combine branch length lists so that indices correspond to splits
        shared_branch=[bl1[splits1.index(s)] for s in shared]
        diff_branch=[bl1[splits1.index(diff[i])] for i in range (dstart,dend)]
        return diff_branch,shared_branch

    splits1,bl1,spp1=list(get_splits(tree1))
    splits2,bl2,spp2=list(get_splits(tree2))

    # creates set S (diff_splits), compatibility matrix (adj), C (shared_splits) and corresponding numbers

    diff_splits,adj,dim1,dim2=get_split_representation(splits1,splits2)

    shared_splits=list(set(splits1).intersection(set(splits2)))
    shared_splits.sort()

    # combine branch length lists so that indices correspond to splits

    diff1,shared1=combine(diff_splits,shared_splits,splits1,bl1,0,dim1)
    diff2,shared2=combine(diff_splits,shared_splits,splits2,bl2,dim1,dim1+dim2)

    shared=[shared1[i]-shared2[i] for i in range(0,len(shared1))]
    return norm(diff1+diff2+shared)

def symmetric(tree1,tree2):
    splits1,bl1,spp1=list(get_splits(tree1))
    splits2,bl2,spp2=list(get_splits(tree2))

    # creates set S (diff_splits), compatibility matrix (adj), C (shared_splits) and corresponding numbers

    diff_splits,adj,dim1,dim2=get_split_representation(splits1,splits2)
    return len(diff_splits)


def correlation(tree1,tree2):
    def combine(diff,shared,splits1,bl1,dstart,dend):
        #combine branch length lists so that indices correspond to splits
        shared_branch=[bl1[splits1.index(s)] for s in shared]
        diff_branch=[bl1[splits1.index(diff[i])] for i in range (dstart,dend)]
        return diff_branch,shared_branch
    splits1,bl1,spp1=list(get_splits(tree1))
    splits2,bl2,spp2=list(get_splits(tree2))

    # creates set S (diff_splits), compatibility matrix (adj), C (shared_splits) and corresponding numbers
    diff_splits,adj,dim1,dim2=get_split_representation(splits1,splits2)

    shared_splits=list(set(splits1).intersection(set(splits2)))
    shared_splits.sort()

    # combine branch length lists so that indices correspond to splits

    diff1,shared1=combine(diff_splits,shared_splits,splits1,bl1,0,dim1)
    diff2,shared2=combine(diff_splits,shared_splits,splits2,bl2,dim1,dim1+dim2)

    mean1 = sum(shared1)/len(shared1);
    mean2 = sum(shared2)/len(shared2);

    dshared1 = [shared1[i] - mean1 for i in range(0, len(shared1))]
    dshared2 = [shared2[i] - mean2 for i in range(0, len(shared2))]

    numerator = sum([dshared1[i] * dshared2[i] for i in range(0,  len(shared1))])

    squared1 = [dshared1[i] * dshared1[i] for i in range(0, len(shared1))]
    squared2 = [dshared2[i] * dshared2[i] for i in range(0, len(shared2))]
    foo1 = sum(squared1)
    foo2 = sum(squared2)

    # print(shared_splits)
    # print(shared1)
    # print(shared2)

    return numerator / math.sqrt(foo1 * foo2)


#===============================================================================#


def main():

    def readfile(file_name):
        if file_name == "-":
            return sys.stdin.readlines()
        else:
            return open(file_name).readlines()

    from argparse import ArgumentParser
    parser = ArgumentParser(description="Compute distances between trees")
    parser.add_argument("--version", dest="version", help="print version information", action="store_true", default=False)
    parser.add_argument('files', nargs='*', help="file with newick trees") # argparse.REMAINDER

    group = parser.add_mutually_exclusive_group()
    group.add_argument("-b", "--branch", dest="branch", help="compute the branch score", action="store_true", default=False)
    group.add_argument("-c", "--cone", dest="cone", help="compute the cone distance", action="store_true", default=False)
    group.add_argument("-g", "--geodesic", dest="geodesic", help="compute the geodesic distance", action="store_true", default=False)
    group.add_argument("-s", "--symmetric", dest="symmetric", help="compute the symmetric distance", action="store_true", default=False)
    group.add_argument("--correlation", dest="correlation", help="compute the correlation", action="store_true", default=False)

    options = parser.parse_args()

    if options.version:
        version()

    files = options.files
    if len(files) == 0:
        if not sys.stdin.isatty():
            # read from pipe
            files = ["-"]
        else:
            warnx("No file name given")
            parser.print_help()
            sys.exit(1)

    tmp = [readfile(fn) for fn in files]
    trees = sum(tmp, []) # flatten

    if len(trees) < 2:
        err("less than two trees given")

    if len(trees) > 2:
        warnx("limiting computation to first two trees")
        trees = trees[0:2]

    if options.cone:
        d=full_cone(trees[0],trees[1])
        print('{:1.4e}'.format(d))
        sys.exit(0)

    if options.branch:
        # unrooted
        d=branch(trees[0],trees[1])
        print('{:1.4e}'.format(d))
        sys.exit(0)

    if options.symmetric:
        # unrooted
        d=symmetric(trees[0],trees[1])
        print('{:d}'.format(d))
        sys.exit(0)

    if options.geodesic:
        d=distance(trees[0],trees[1])
        print('{:1.4e}'.format(d))
        sys.exit(0)

    if options.correlation:
        d=correlation(trees[0],trees[1])
        print('{:1.4e}'.format(d))
        sys.exit(0)

    err("No distance method chosen")
    
if __name__ == "__main__":
    main()
